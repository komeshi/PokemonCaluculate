@page
@model PokemonCaluculate.Pages.PokemonStatus.FindModel
@{
    ViewData["Title"] = Model.Pokemons[0].Name;
}


<h1>@Model.Pokemons[0].Name</h1>


<div class="row">
    <div class="col-4">
        <img src="@Model.Pokemons[0].IconPass" alt="@Model.Pokemons[0].Name" loading="lazy" />
        <canvas id="abilityChart" width="400" height="400"></canvas>
        <canvas id="raceChart" width="400" height="400"></canvas>
    </div>
    <div class="col-4">
        <h2>レベル</h2>
        <input class="range-slider__range" type="range" value="50" min="1" max="100" step="1" onchange="upDateParm('','')">
        <span class="range-slider__value" id="level">50</span>
        <h2>努力値</h2>
        <div class="range-slider">
            <p class="sta-name">HP</p>
            <input class="range-slider__range effort-slider" type="range" value="0" min="0" max="252" step="4" onchange="upDateParm('','')">
            <span class="range-slider__value" id="hp-effort">0</span>
        </div>
        <span id="hp-ability" class="hidden"></span>
        <br />

        <div class="range-slider">
            <p class="sta-name">攻撃</p>
            <input class="range-slider__range effort-slider" type="range" value="0" min="0" max="252" step="4" onchange="upDateParm('','')">
            <span class="range-slider__value" id="atk-effort">0</span>
        </div>
        +<input type="radio" name="plus" value="atk" onclick="staChange()" />
        -<input type="radio" name="minus" value="atk" onclick="staChange()" />
        <span id="atk-ability" class="hidden"></span>
        <br />

        <div class="range-slider">
            <p class="sta-name">防御</p>
            <input class="range-slider__range effort-slider" type="range" value="0" min="0" max="252" step="4" onchange="upDateParm('','')">
            <span class="range-slider__value" id="blk-effort">0</span>
        </div>
        +<input type="radio" name="plus" value="blk" onclick="staChange()" />
        -<input type="radio" name="minus" value="blk" onclick="staChange()" />
        <span id="blk-ability" class="hidden"></span>
        <br />

        <div class="range-slider">
            <p class="sta-name">特攻</p>
            <input class="range-slider__range effort-slider" type="range" value="0" min="0" max="252" step="4" onchange="upDateParm('','')">
            <span class="range-slider__value" id="cnt-effort">0</span>
        </div>
        +<input type="radio" name="plus" value="cnt" onclick="staChange()" />
        -<input type="radio" name="minus" value="cnt" onclick="staChange()" />
        <span id="cnt-ability" class="hidden"></span>
        <br />
        <div class="range-slider">
            <p class="sta-name">特防</p>
            <input class="range-slider__range effort-slider" type="range" value="0" min="0" max="252" step="4" onchange="upDateParm('','')">
            <span class="range-slider__value" id="dfe-effort">0</span>
        </div>
        +<input type="radio" name="plus" value="dfe" onclick="staChange()" />
        -<input type="radio" name="minus" value="dfe" onclick="staChange()" />
        <span id="dfe-ability" class="hidden"></span>
        <br />

        <div class="range-slider">
            <p class="sta-name">素早さ</p>
            <input class="range-slider__range effort-slider" type="range" value="0" min="0" max="252" step="4" onchange="upDateParm('','')">
            <span class="range-slider__value" id="spd-effort">0</span>
        </div>
        +<input type="radio" name="plus" value="spd" onclick="staChange()" />
        -<input type="radio" name="minus" value="spd" onclick="staChange()" />
        <span id="spd-ability" class="hidden"></span>
        <br />
    </div>
    <div class="col-4">
        <h2 id="individual-title">個体値</h2>
        <div class="range-slider">
            <p class="sta-name">HP</p>
            <input class="range-slider__range" type="range" value="31" min="0" max="31" step="1" onchange="upDateParm('','')">
            <span class="range-slider__value" id="hp-individual">31</span>
        </div>
        <span id="hp-individual"></span>
        <br />

        <div class="range-slider">
            <p class="sta-name">攻撃</p>
            <input class="range-slider__range" type="range" value="31" min="0" max="31" step="1" onchange="upDateParm('','')">
            <span class="range-slider__value" id="atk-individual">31</span>
        </div>
        <span id="atk-individual"></span>
        <br />

        <div class="range-slider">
            <p class="sta-name">防御</p>
            <input class="range-slider__range" type="range" value="31" min="0" max="31" step="1" onchange="upDateParm('','')">
            <span class="range-slider__value" id="blk-individual">31</span>
        </div>
        <span id="blk-individual"></span>
        <br />

        <div class="range-slider">
            <p class="sta-name">特攻</p>
            <input class="range-slider__range" type="range" value="31" min="0" max="31" step="1" onchange="upDateParm('','')">
            <span class="range-slider__value" id="cnt-individual">31</span>
        </div>
        <span id="cnt-individual"></span>
        <br />

        <div class="range-slider">
            <p class="sta-name">特防</p>
            <input class="range-slider__range" type="range" value="31" min="0" max="31" step="1" onchange="upDateParm('','')">
            <span class="range-slider__value" id="dfe-individual">31</span>
        </div>
        <span id="dfe-individual"></span>
        <br />

        <div class="range-slider">
            <p class="sta-name">素早さ</p>
            <input class="range-slider__range" type="range" value="31" min="0" max="31" step="1" onchange="upDateParm('','')">
            <span class="range-slider__value" id="spd-individual">31</span>
        </div>
        <span id="spd-individual"></span>
        <br />
    </div>
</div>

<link href="~/css/result.css" rel="stylesheet" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js"></script>


@section scripts{
    <script>

        // 種族値制御
        var maxTotal = 508,
            inputs = [].slice.call(document.getElementsByClassName('effort-slider')),
            getTotal = function () {
                var sum = 0;
                inputs.forEach(function (input) {
                    sum += parseInt(input.value, 10);
                });
                return sum;
            },
            maxReached = function (e) {
                var sum = getTotal(),
                    target;
                if (sum > maxTotal) {
                    target = e.target;
                    target.value = target.value - (sum - maxTotal);
                    // next line is just for demonstrational purposes
                    e.preventDefault();
                    return false;
                }
                return true;
            };

        inputs.forEach(function (input) {
            input.addEventListener('input', maxReached);
        });

        // 種族値制御ここまで


        // ページ読み込み時
        $(document).ready(function () {
            setParm();
        });

        var parmName = ['hp', 'atk', 'blk', 'cnt', 'dfe', 'spd'];
        var raceNum = [@Model.Pokemons[0].Hitpoint,@Model.Pokemons[0].Attack,@Model.Pokemons[0].Block,@Model.Pokemons[0].Contact,@Model.Pokemons[0].Defense,@Model.Pokemons[0].Speed];

        function setParm() {
            var HP = HpCal(raceNum[0], 0, 31, 50, parmName[0] + '-ability');
            var parm = new Array(6);
            for (let i = 1; i < raceNum.length; i++) {
                parm[i] = StaCal(raceNum[i], 0, 31, 50, parmName[i] + '-ability');
            }
            DrawRadar(HP,parm[1],parm[2],parm[3],parm[4],parm[5]);
        }

        function StaCal(race, effort, individual, Lv, ability) {
            var elem = document.getElementById(ability);
            var param = Math.floor((Math.floor((race * 2) + individual + (effort / 4.0)) * Lv) / 100) + 5;
            elem.textContent = param;
            return param;
        }

        function HpCal(race, effort, individual, Lv, ability) {
            var elem = document.getElementById(ability);
            var HP = Math.floor((Math.floor((race * 2) + individual + (effort / 4.0)) * Lv) / 100) + Lv + 10;
            elem.textContent = HP;
            return HP;
        }

         // ページ読み込み時ここまで

        // 性格補正
        function staChange() {
            var plusPra = $('[name="plus"]:checked').val();
            var minusPra = $('[name="minus"]:checked').val();
            upDateParm(plusPra, minusPra);
        }


        // スライダー変更時
        function upDateParm(plusPra, minusPra) {
            var parmNum = new Array(6);
            var labelName = ['HP: ', '攻撃: ', '防御: ', '素早さ: ', '特防: ', '特攻: '];
            var temp = 0;

            parmNum[0] = upDateHpCal(raceNum[0], parmName[0]);
            for (let i = 1; i < raceNum.length; i++) {
                parmNum[i] = upDateStaCal(raceNum[i], parmName[i], plusPra, minusPra);
            }

            /* 描画順のため素早さ特攻入れ替え */
            temp = parmNum[3];
            parmNum[3] = parmNum[5];
            parmNum[5] = temp;

            for (let i = 0; i < labelName.length; i++) {
                labelName[i] += parmNum[i];
            }
            chartUpdate(labelName,parmNum);
        }

        function upDateHpCal(race, parm) {
            var elem = document.getElementById(parm + '-ability');
            var effort_value = parseInt(document.getElementById(parm + '-effort').innerHTML, 10);
            var individual_value = parseInt(document.getElementById(parm + '-individual').innerHTML, 10);
            var level = parseInt(document.getElementById('level').innerHTML, 10);
            var HP = Math.floor((Math.floor((race * 2) + individual_value + (effort_value / 4.0)) * level) / 100) + level + 10;
            elem.textContent = HP;
            return HP;
        }

        function upDateStaCal(race, parmName, plusPra, minusPra) {
            var elem = document.getElementById(parmName + '-ability');
            var effort_value = parseInt(document.getElementById(parmName + '-effort').innerHTML, 10);
            var individual_value = parseInt(document.getElementById(parmName + '-individual').innerHTML, 10);
            var level = parseInt(document.getElementById('level').innerHTML, 10);
            var param = Math.floor((Math.floor((race * 2) + individual_value + (effort_value / 4.0)) * level) / 100) + 5;
            elem.textContent = param;
            if (parmName == plusPra) {
                param = Math.floor(param * 1.1);
            } else
            {
                if (parmName == minusPra) {
                    param = Math.floor(param * 0.9);
                }
            }
            return param;
        }

        // スライダー変更時ここまで

        function chartUpdate(labels, data) {
            myChart.data.labels = labels;
            myChart.data.datasets[0].data = data;
            myChart.update();
        }

        /* 能力値レーダーチャート */
        function DrawRadar(hp, atk, blk, cnt, dfe, spd) {
            var ctx = document.getElementById('abilityChart').getContext('2d');
            window.myChart = new Chart(ctx, {
                type: 'radar',
                data: {
                    labels: ['HP: ' + hp, '攻撃: ' + atk, '防御: ' + blk, '素早さ: ' + spd, '特防: ' + dfe, '特攻: ' + cnt],
                    datasets: [{
                        label: 'ステータス',
                        borderColor: '#b5dcea',
                        backgroundColor: '#d5eeff8f',
                        data: [hp, atk, blk, spd, dfe, cnt]
                    }]
                },
                options: {
                    title: {
                        display: false
                    },
                    scale: {
                        display: true,
                        pointLabels: {
                            fontSize: 14
                        },
                        ticks: {
                            display: false,
                            beginAtZero: true,
                            max: 250,
                            min: 0,
                            stepSize: 50
                        },
                    },
                    legend: {
                        display: false
                    },
                },
                gridLines: {
                    display: false
                },
            });
        }

        /*種族値棒グラフ */
        function DrawRadar2(hp, atk, blk, cnt, dfe, spd) {
            var ctx = document.getElementById('raceChart').getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'horizontalBar',
                data: {
                    labels: ['HP: ' + hp, '攻撃: ' + atk, '防御: ' + blk, '素早さ: ' + spd, '特防: ' + dfe, '特攻: ' + cnt],
                    datasets: [{
                        label: 'ステータス',
                        borderColor: '#b5dcea',
                        backgroundColor: '#d5eeff8f',
                        data: [hp, atk, blk, spd, dfe, cnt]
                    }]
                },
                options: {
                    title: {
                        display: false
                    },
                },
            });
        }

        /*スライダー*/
        var rangeSlider = function () {
            var slider = $('.range-slider'),
                range = $('.range-slider__range'),
                value = $('.range-slider__value');

            slider.each(function () {

                value.each(function () {
                    var value = $(this).prev().attr('value');
                    $(this).html(value);
                });

                range.on('input', function () {
                    $(this).next(value).html(this.value);
                });
            });
        };

        rangeSlider();


    </script>
}


